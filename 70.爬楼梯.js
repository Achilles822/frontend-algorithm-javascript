// 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

// 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

// 注意：给定 n 是一个正整数。

// 示例 1：

// 输入： 2
// 输出： 2
// 解释： 有两种方法可以爬到楼顶。
// 1.  1 阶 + 1 阶
// 2.  2 阶
// 示例 2：

// 输入： 3
// 输出： 3
// 解释： 有三种方法可以爬到楼顶。
// 1.  1 阶 + 1 阶 + 1 阶
// 2.  1 阶 + 2 阶
// 3.  2 阶 + 1 阶

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/climbing-stairs
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// 1. 假设有1个台阶，只有1种方法


// 2. 假设有2级台阶，只有2种方法

// 3. 假设有3级台阶
// 3.1 先爬1阶，接下来还有2阶台阶，那问题就是有2阶台阶怎么爬


// 3.2 先爬2阶，接下来还有1阶台阶，那问题就是有1阶台阶怎么爬


// 好像有规律的，再往下分析分析
// 4. 假设有4级台阶

// 4.1 先爬1阶，接下来还有3阶台阶，那问题就是有3阶台阶怎么爬


// 3.2 先爬2阶，接下来还有2阶台阶，那问题就是有2阶台阶怎么爬


// 5. 假设有n级台阶
// 5.1 先爬1阶，接下来还有 n - 1 阶台阶，那问题就是有n - 1阶台阶怎么爬


// 5.1 先爬2阶，接下来还有 n - 2 阶台阶，那问题就是有n - 2阶台阶怎么爬


// 数学归纳法得出，有n阶台阶那么就是 n - 1 阶台阶和 n - 2 阶台阶爬上楼顶的方法的和。

// 公式： f(n) = f(n - 1) + f(n - 2) , 这不就是菲波那切数列数量求和吗？

// 作者：caddy-k
// 链接：https://leetcode-cn.com/problems/climbing-stairs/solution/yuan-lai-hui-pa-lou-ti-de-zheng-que-zi-s-pjez/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

var climbStairs = function (n) {
  let dp = []
  dp[1] = 1
  dp[2] = 2

  for (let i = 3; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2]
  }
  return dp[n]
}


// 执行用时：
// 76 ms
// , 在所有 JavaScript 提交中击败了
// 84.31%
// 的用户
// 内存消耗：
// 37.4 MB
// , 在所有 JavaScript 提交中击败了
// 94.91%
// 的用户