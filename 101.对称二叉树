// 给定一个二叉树，检查它是否是镜像对称的。

//  

// 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

//     1
//    / \
//   2   2
//  / \ / \
// 3  4 4  3
//  

// 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

//     1
//    / \
//   2   2
//    \   \
//    3    3
//  

// 进阶：

// 你可以运用递归和迭代两种方法解决这个问题吗？



// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/symmetric-tree
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// 两个根结点相等
// 左子树的右节点和右子树的左节点相同。
// 右子树的左节点和左子树的右节点相同。
// 递归所有节点满足以上条件即二叉树对称。

var isSymmetric = function (root) {
    return helper(root, root)
};
const helper = (node1, node2) => {
    // 两个节点都空，对称
    if (!node1 && !node2) {
        return true
    }
    // 两个节点一个不存在，不对称
    if (!node1 || !node2) {
        return false
    }
    // 两个节点都存在但是值不相等，不对称
    if (node1.val !== node2.val) {
        return false
    }
    // node1左节点等于node2右节点，node2左节点等于node1右节点，则对称
    return helper(node1.left, node2.right) && helper(node1.right, node2.left)
}