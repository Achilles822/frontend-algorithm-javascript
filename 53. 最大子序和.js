// 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

//  

// 示例 1：

// 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
// 输出：6
// 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
// 示例 2：

// 输入：nums = [1]
// 输出：1
// 示例 3：

// 输入：nums = [0]
// 输出：0
// 示例 4：

// 输入：nums = [-1]
// 输出：-1
// 示例 5：

// 输入：nums = [-100000]
// 输出：-100000
//  

// 提示：

// 1 <= nums.length <= 105
// -104 <= nums[i] <= 104
//  

// 进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。



// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/maximum-subarray
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

var maxSubArray = function (nums) {
    let dp = Array(nums.length); //状态定义为以i结尾的最大子数组和
    dp[0] = nums[0];
    for (let i = 1; i < nums.length; i++) {
        //下面是状态转移方程
        if (dp[i - 1] > 0) { //如果前面累积起来大于0
            dp[i] = dp[i - 1] + nums[i];  //前面的积蓄是正的资产是有意义的，就加起来，最后结果会更大
        } else {  //前面的积蓄是负债，就不要，自立门户从自己开始
            dp[i] = nums[i];
        }
    }
    return Math.max(...dp);
};
